#!/usr/bin/perl -w -- 
#
# generated by wxGlade 0.7.2 on Wed Jan 25 08:24:18 2017 from "C:\work\AnGe4u１\AnGe4mon.wxg"
#
# To get wxPerl visit http://www.wxperl.it
#


use Wx 0.15 qw[:allclasses];
use strict;

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade

package MyFrame;
use threads;
use threads::shared;
use Wx::Perl::Packager;
use Wx qw[:everything];
use base qw(Wx::Frame);
use strict;
use warnings;
use utf8;
use Data::Dumper::AutoEncode;
use lib ".";
use Shot3;
use Ntp;
use Opshon3;

my $trn;

sub new {
   my( $self, $parent, $id, $title, $pos, $size, $style, $name ) = @_;
   $parent = undef              unless defined $parent;
   $id     = -1                 unless defined $id;
   $title  = ""                 unless defined $title;
   $pos    = wxDefaultPosition  unless defined $pos;
   $size   = wxDefaultSize      unless defined $size;
   $name   = ""                 unless defined $name;

   # begin wxGlade: MyFrame::new
   $style = wxDEFAULT_FRAME_STYLE 
      unless defined $style;

   $self = $self->SUPER::new( $parent, $id, $title, $pos, $size, $style, $name );
   

   # Menu Bar

   $self->{frame_1_menubar} = Wx::MenuBar->new();
   my $wxglade_tmp_menu;
   $self->{file} = Wx::Menu->new();
   $self->{exit} = $self->{file}->Append(wxID_ANY, "\N{U+7d42}\N{U+4e86}(&X)", "");
   $self->{quit} = $self->{file}->Append(wxID_ANY, "\N{U+30e2}\N{U+30cb}\N{U+30bf}\N{U+306e}\N{U+307f}\N{U+7d42}\N{U+4e86}(&Q)", "");
   $self->{file}->AppendSeparator();
   $self->{about} = $self->{file}->Append(wxID_ANY, "AnGe4u\N{U+306b}\N{U+3064}\N{U+3044}\N{U+3066}(&A)", "");
   $self->{frame_1_menubar}->Append($self->{file}, "\N{U+30d5}\N{U+30a1}\N{U+30a4}\N{U+30eb}(&F)");
   $self->SetMenuBar($self->{frame_1_menubar});
   
   # Menu Bar end

   $self->{frame_1_statusbar} = $self->CreateStatusBar(3);
   $self->{panel_2} = Wx::Panel->new($self, wxID_ANY);
   $self->{grid_1} = Wx::Grid->new($self->{panel_2}, wxID_ANY);
   $self->{notebook_1} = Wx::Notebook->new($self, wxID_ANY);
   $self->{notebook_1_pane_1} = Wx::ScrolledWindow->new($self->{notebook_1}, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxTAB_TRAVERSAL);
   $self->{outpath} = Wx::TextCtrl->new($self->{notebook_1_pane_1}, wxID_ANY, "\N{U+672a}\N{U+8a2d}\N{U+5b9a}");
   $self->{dir_picker} = Wx::DirPickerCtrl->new($self->{notebook_1_pane_1}, wxID_ANY);
   $self->{premargin} = Wx::SpinCtrl->new($self->{notebook_1_pane_1}, wxID_ANY, "15", wxDefaultPosition, wxDefaultSize, wxSP_ARROW_KEYS, -32768, 32767, 15);
   $self->{postmargin} = Wx::SpinCtrl->new($self->{notebook_1_pane_1}, wxID_ANY, "15", wxDefaultPosition, wxDefaultSize, wxSP_ARROW_KEYS, -32768, 32767, 15);
   $self->{recmode} = Wx::Choice->new($self->{notebook_1_pane_1}, wxID_ANY, wxDefaultPosition, wxDefaultSize, ["\N{U+5168}\N{U+3066}\N{U+306e}\N{U+653e}\N{U+9001}\N{U+3092}\N{U+4fdd}\N{U+5b58}", "\N{U+521d}\N{U+56de}\N{U+653e}\N{U+9001}\N{U+306e}\N{U+307f}\N{U+4fdd}\N{U+5b58}", "\N{U+30ea}\N{U+30d4}\N{U+30fc}\N{U+30c8}\N{U+653e}\N{U+9001}\N{U+306e}\N{U+307f}\N{U+4fdd}\N{U+5b58}"], );
   $self->{keepvideo} = Wx::Choice->new($self->{notebook_1_pane_1}, wxID_ANY, wxDefaultPosition, wxDefaultSize, ["\N{U+756a}\N{U+7d44}\N{U+8868}\N{U+306b}\N{U+3088}\N{U+308a}\N{U+5224}\N{U+65ad}", "\N{U+5e38}\N{U+306b}\N{U+9332}\N{U+753b}", "\N{U+5e38}\N{U+306b}\N{U+9332}\N{U+97f3}"], );
   $self->{server} = Wx::TextCtrl->new($self->{notebook_1_pane_1}, wxID_ANY, "");
   $self->{notebook_1_pane_2} = Wx::Panel->new($self->{notebook_1}, wxID_ANY);
   $self->{text_ctrl_1} = Wx::TextCtrl->new($self->{notebook_1_pane_2}, wxID_ANY, "", wxDefaultPosition, wxDefaultSize, wxTE_MULTILINE);
   $self->{button_102r} = Wx::Button->new($self->{notebook_1_pane_2}, wxID_ANY, "&Reload");
   $self->{button_102s} = Wx::Button->new($self->{notebook_1_pane_2}, wxID_ANY, "&Save");
   $self->{notebook_1_pane_3} = Wx::Panel->new($self->{notebook_1}, wxID_ANY);
   $self->{text_ctrl_2} = Wx::TextCtrl->new($self->{notebook_1_pane_3}, wxID_ANY, "", wxDefaultPosition, wxDefaultSize, wxTE_MULTILINE);
   $self->{button_103r} = Wx::Button->new($self->{notebook_1_pane_3}, wxID_ANY, "&Reload");
   $self->{button_103s} = Wx::Button->new($self->{notebook_1_pane_3}, wxID_ANY, "&Save");
   $self->{notebook_1_pane_4} = Wx::ScrolledWindow->new($self->{notebook_1}, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxTAB_TRAVERSAL);
   $self->{dlqueue} = Wx::TextCtrl->new($self->{notebook_1_pane_4}, wxID_ANY, "", wxDefaultPosition, wxDefaultSize, wxBORDER_NONE|wxTE_NO_VSCROLL|wxTE_READONLY);
   $self->{label_2} = Wx::StaticText->new($self->{notebook_1_pane_4}, wxID_ANY, "\N{U+97ff}\N{U+30c0}\N{U+30a6}\N{U+30f3}\N{U+30ed}\N{U+30fc}\N{U+30c0}", wxDefaultPosition, wxDefaultSize, wxALIGN_CENTER);
   $self->{checkbox_00} = Wx::CheckBox->new($self->{notebook_1_pane_4}, wxID_ANY, "\N{U+6708}");
   $self->{checkbox_01} = Wx::CheckBox->new($self->{notebook_1_pane_4}, wxID_ANY, "\N{U+706b}");
   $self->{checkbox_02} = Wx::CheckBox->new($self->{notebook_1_pane_4}, wxID_ANY, "\N{U+6c34}");
   $self->{checkbox_03} = Wx::CheckBox->new($self->{notebook_1_pane_4}, wxID_ANY, "\N{U+6728}");
   $self->{checkbox_04} = Wx::CheckBox->new($self->{notebook_1_pane_4}, wxID_ANY, "\N{U+91d1}");
   $self->{checkbox_05} = Wx::CheckBox->new($self->{notebook_1_pane_4}, wxID_ANY, "\N{U+571f}");
   $self->{checkbox_06} = Wx::CheckBox->new($self->{notebook_1_pane_4}, wxID_ANY, "\N{U+65e5}");
   $self->{checkbox_10} = Wx::CheckBox->new($self->{notebook_1_pane_4}, wxID_ANY, "\N{U+5168}\N{U+90e8}", wxDefaultPosition, wxDefaultSize, wxCHK_3STATE);
   $self->{Buton_hibiki} = Wx::Button->new($self->{notebook_1_pane_4}, wxID_ANY, "\N{U+97ff}\N{U+30ad}\N{U+30e5}\N{U+30fc}\N{U+8ffd}\N{U+52a0}");
   $self->{button_ehibiki} = Wx::ToggleButton->new($self->{notebook_1_pane_4}, wxID_ANY, "\N{U+97ff} \N{U+6bce}\N{U+65e5}\N{U+5168}\N{U+4fdd}\N{U+5b58}");
   $self->{label_3} = Wx::StaticText->new($self->{notebook_1_pane_4}, wxID_ANY, "\N{U+97f3}\N{U+6cc9}\N{U+30c0}\N{U+30a6}\N{U+30f3}\N{U+30ed}\N{U+30fc}\N{U+30c0}", wxDefaultPosition, wxDefaultSize, wxALIGN_CENTER);
   $self->{checkbox_00_copy} = Wx::CheckBox->new($self->{notebook_1_pane_4}, wxID_ANY, "\N{U+6708}");
   $self->{checkbox_01_copy} = Wx::CheckBox->new($self->{notebook_1_pane_4}, wxID_ANY, "\N{U+706b}");
   $self->{checkbox_02_copy} = Wx::CheckBox->new($self->{notebook_1_pane_4}, wxID_ANY, "\N{U+6c34}");
   $self->{checkbox_03_copy} = Wx::CheckBox->new($self->{notebook_1_pane_4}, wxID_ANY, "\N{U+6728}");
   $self->{checkbox_04_copy} = Wx::CheckBox->new($self->{notebook_1_pane_4}, wxID_ANY, "\N{U+91d1}");
   $self->{checkbox_05_copy} = Wx::CheckBox->new($self->{notebook_1_pane_4}, wxID_ANY, "\N{U+571f}");
   $self->{checkbox_06_copy} = Wx::CheckBox->new($self->{notebook_1_pane_4}, wxID_ANY, "\N{U+65e5}");
   $self->{checkbox_10_copy} = Wx::CheckBox->new($self->{notebook_1_pane_4}, wxID_ANY, "\N{U+5168}\N{U+90e8}", wxDefaultPosition, wxDefaultSize, wxCHK_3STATE);
   $self->{Buton_onsen_copy} = Wx::Button->new($self->{notebook_1_pane_4}, wxID_ANY, "\N{U+97f3}\N{U+6cc9}\N{U+30ad}\N{U+30e5}\N{U+30fc}\N{U+8ffd}\N{U+52a0}");
   $self->{button_eonsen} = Wx::ToggleButton->new($self->{notebook_1_pane_4}, wxID_ANY, "\N{U+97f3}\N{U+6cc9} \N{U+6bce}\N{U+65e5}\N{U+5168}\N{U+4fdd}\N{U+5b58}");
   $self->{button_backspace} = Wx::Button->new($self->{notebook_1_pane_4}, wxID_ANY, "Back\nspace");
   $self->{notebook_1_pane_5} = Wx::Panel->new($self->{notebook_1}, wxID_ANY);
   $self->{trnsh} = Wx::TextCtrl->new($self->{notebook_1_pane_5}, wxID_ANY, "", wxDefaultPosition, wxDefaultSize, wxTE_MULTILINE);
   $self->{button_1} = Wx::Button->new($self->{notebook_1_pane_5}, wxID_ANY, "\N{U+5909}\N{U+6570}");
   $self->{button_2} = Wx::Button->new($self->{notebook_1_pane_5}, wxID_ANY, "\N{U+30b9}\N{U+30ec}\N{U+30c3}\N{U+30c9}");
   $self->{button_3} = Wx::Button->new($self->{notebook_1_pane_5}, wxID_ANY, ">\N{U+8b0e}<");
   $self->{button_4} = Wx::Button->new($self->{notebook_1_pane_5}, wxID_ANY, "\N{U+756a}\N{U+7d44}\N{U+8868}");
   $self->{console} = Wx::TextCtrl->new($self, wxID_ANY, "", wxDefaultPosition, wxDefaultSize, wxTE_MULTILINE|wxTE_READONLY);

   $self->__set_properties();
   $self->__do_layout();

   Wx::Event::EVT_MENU($self, $self->{exit}->GetId, \&_shuryo);
   Wx::Event::EVT_MENU($self, $self->{quit}->GetId, \&_quit);
   Wx::Event::EVT_MENU($self, $self->{about}->GetId, \&_nitsuite);
   Wx::Event::EVT_TEXT($self, $self->{outpath}->GetId, \&_outpath);
   Wx::Event::EVT_SPINCTRL($self, $self->{premargin}->GetId, \&_premargin);
   Wx::Event::EVT_SPINCTRL($self, $self->{postmargin}->GetId, \&_postmargin);
   Wx::Event::EVT_CHOICE($self, $self->{recmode}->GetId, \&_recmode);
   Wx::Event::EVT_CHOICE($self, $self->{keepvideo}->GetId, \&_keepvideo);
   Wx::Event::EVT_TEXT($self, $self->{server}->GetId, \&_server);
   Wx::Event::EVT_BUTTON($self, $self->{button_102r}->GetId, \&reload);
   Wx::Event::EVT_BUTTON($self, $self->{button_102s}->GetId, \&resave);
   Wx::Event::EVT_BUTTON($self, $self->{button_103r}->GetId, \&reload);
   Wx::Event::EVT_BUTTON($self, $self->{button_103s}->GetId, \&resave);
   Wx::Event::EVT_CHECKBOX($self, $self->{checkbox_00}->GetId, \&_checkbox_hibiki_3st);
   Wx::Event::EVT_CHECKBOX($self, $self->{checkbox_01}->GetId, \&_checkbox_hibiki_3st);
   Wx::Event::EVT_CHECKBOX($self, $self->{checkbox_02}->GetId, \&_checkbox_hibiki_3st);
   Wx::Event::EVT_CHECKBOX($self, $self->{checkbox_03}->GetId, \&_checkbox_hibiki_3st);
   Wx::Event::EVT_CHECKBOX($self, $self->{checkbox_04}->GetId, \&_checkbox_hibiki_3st);
   Wx::Event::EVT_CHECKBOX($self, $self->{checkbox_05}->GetId, \&_checkbox_hibiki_3st);
   Wx::Event::EVT_CHECKBOX($self, $self->{checkbox_06}->GetId, \&_checkbox_hibiki_3st);
   Wx::Event::EVT_CHECKBOX($self, $self->{checkbox_10}->GetId, \&_checkbox_hibiki);
   Wx::Event::EVT_BUTTON($self, $self->{Buton_hibiki}->GetId, \&_button_hibiki);
   Wx::Event::EVT_TOGGLEBUTTON($self, $self->{button_ehibiki}->GetId, \&_button_everyhibiki);
   Wx::Event::EVT_CHECKBOX($self, $self->{checkbox_00_copy}->GetId, \&_checkbox_onsen_3st);
   Wx::Event::EVT_CHECKBOX($self, $self->{checkbox_01_copy}->GetId, \&_checkbox_onsen_3st);
   Wx::Event::EVT_CHECKBOX($self, $self->{checkbox_02_copy}->GetId, \&_checkbox_onsen_3st);
   Wx::Event::EVT_CHECKBOX($self, $self->{checkbox_03_copy}->GetId, \&_checkbox_onsen_3st);
   Wx::Event::EVT_CHECKBOX($self, $self->{checkbox_04_copy}->GetId, \&_checkbox_onsen_3st);
   Wx::Event::EVT_CHECKBOX($self, $self->{checkbox_05_copy}->GetId, \&_checkbox_onsen_3st);
   Wx::Event::EVT_CHECKBOX($self, $self->{checkbox_06_copy}->GetId, \&_checkbox_onsen_3st);
   Wx::Event::EVT_CHECKBOX($self, $self->{checkbox_10_copy}->GetId, \&_checkbox_onsen);
   Wx::Event::EVT_BUTTON($self, $self->{Buton_onsen_copy}->GetId, \&_button_onsen);
   Wx::Event::EVT_TOGGLEBUTTON($self, $self->{button_eonsen}->GetId, \&_button_everyonsen);
   Wx::Event::EVT_BUTTON($self, $self->{button_backspace}->GetId, \&_button_backspace);
   Wx::Event::EVT_BUTTON($self, $self->{button_1}->GetId, \&debug_button_1);
   Wx::Event::EVT_BUTTON($self, $self->{button_2}->GetId, \&debug_button_2);
   Wx::Event::EVT_BUTTON($self, $self->{button_3}->GetId, \&debug_button_3);
   Wx::Event::EVT_BUTTON($self, $self->{button_4}->GetId, \&debug_button_4);

   # end wxGlade
   ### dir picker
   Wx::Event::EVT_DIRPICKER_CHANGED($self, $self->{dir_picker}->GetId, \&_outpath2);
   ### １秒
   Wx::Event::EVT_TIMER($self, $self->{timer_1}->GetId, \&_interval);
   return $self;
}


sub __set_properties {
   my $self = shift;
   # begin wxGlade: MyFrame::__set_properties
   $self->SetTitle("AnGe4u");
   $self->{frame_1_statusbar}->SetStatusWidths(260, 310, 30);
   
   $self->{grid_1}->CreateGrid(16, 4);
   $self->{grid_1}->SetRowLabelSize(32);
   $self->{grid_1}->SetColLabelSize(24);
   $self->{grid_1}->EnableEditing(0);
   $self->{grid_1}->EnableDragColSize(0);
   $self->{grid_1}->EnableDragRowSize(0);
   $self->{grid_1}->EnableDragGridSize(0);
   $self->{grid_1}->SetSelectionMode(wxGridSelectCells);
   $self->{grid_1}->SetColLabelValue(0, "Status");
   $self->{grid_1}->SetColSize(0, 64);
   $self->{grid_1}->SetColLabelValue(1, "ID");
   $self->{grid_1}->SetColSize(1, 64);
   $self->{grid_1}->SetColLabelValue(2, "Remain");
   $self->{grid_1}->SetColSize(2, 64);
   $self->{grid_1}->SetColLabelValue(3, "Title");
   $self->{grid_1}->SetColSize(3, 640);
   $self->{outpath}->SetMinSize($self->{outpath}->ConvertDialogSizeToPixels(Wx::Size->new(240, 13)));
   $self->{dir_picker}->SetMinSize($self->{dir_picker}->ConvertDialogSizeToPixels(Wx::Size->new(50, 14)));
   $self->{recmode}->SetSelection(0);
   $self->{keepvideo}->SetSelection(0);
   $self->{notebook_1_pane_1}->SetScrollRate(10, 10);
   $self->{button_102r}->SetDefault();
   $self->{button_103r}->SetDefault();
   $self->{dlqueue}->SetMinSize($self->{dlqueue}->ConvertDialogSizeToPixels(Wx::Size->new(384, 12)));
   $self->{dlqueue}->SetBackgroundColour(Wx::Colour->new(255, 255, 255));
   $self->{dlqueue}->SetForegroundColour(Wx::Colour->new(0, 0, 0));
   $self->{checkbox_06}->Enable(0);
   $self->{checkbox_10}->Set3StateValue(wxCHK_UNCHECKED);
   $self->{Buton_hibiki}->SetMinSize($self->{Buton_hibiki}->ConvertDialogSizeToPixels(Wx::Size->new(80, 14)));
   $self->{Buton_hibiki}->SetToolTip("\N{U+30c1}\N{U+30a7}\N{U+30c3}\N{U+30af}\N{U+3057}\N{U+305f}\N{U+66dc}\N{U+65e5}\N{U+306e}\N{U+756a}\N{U+7d44}\N{U+3092}\N{U+30ad}\N{U+30e5}\N{U+30fc}\N{U+306b}\N{U+9001}\N{U+308b}");
   $self->{button_ehibiki}->SetMinSize($self->{button_ehibiki}->ConvertDialogSizeToPixels(Wx::Size->new(80, 14)));
   $self->{button_ehibiki}->SetToolTip("2\N{U+6642}\N{U+9593}\N{U+3054}\N{U+3068}\N{U+306b}\N{U+97ff}\N{U+306e}\N{U+5168}\N{U+756a}\N{U+7d44}\N{U+3092}\N{U+30ad}\N{U+30e5}\N{U+30fc}\N{U+306b}\N{U+9001}\N{U+308b}");
   $self->{checkbox_10_copy}->Set3StateValue(wxCHK_UNCHECKED);
   $self->{Buton_onsen_copy}->SetMinSize($self->{Buton_onsen_copy}->ConvertDialogSizeToPixels(Wx::Size->new(80, 14)));
   $self->{Buton_onsen_copy}->SetToolTip("\N{U+30c1}\N{U+30a7}\N{U+30c3}\N{U+30af}\N{U+3057}\N{U+305f}\N{U+66dc}\N{U+65e5}\N{U+306e}\N{U+756a}\N{U+7d44}\N{U+3092}\N{U+30ad}\N{U+30e5}\N{U+30fc}\N{U+306b}\N{U+9001}\N{U+308b}");
   $self->{button_eonsen}->SetMinSize($self->{button_eonsen}->ConvertDialogSizeToPixels(Wx::Size->new(80, 14)));
   $self->{button_eonsen}->SetToolTip("2\N{U+6642}\N{U+9593}\N{U+3054}\N{U+3068}\N{U+306b}\N{U+97f3}\N{U+6cc9}\N{U+306e}\N{U+5168}\N{U+756a}\N{U+7d44}\N{U+3092}\N{U+30ad}\N{U+30e5}\N{U+30fc}\N{U+306b}\N{U+9001}\N{U+308b}");
   $self->{button_backspace}->SetMinSize($self->{button_backspace}->ConvertDialogSizeToPixels(Wx::Size->new(45, 24)));
   $self->{notebook_1_pane_4}->SetScrollRate(10, 10);
   $self->{notebook_1}->SetMinSize($self->{notebook_1}->ConvertDialogSizeToPixels(Wx::Size->new(457, 333)));
   $self->{console}->SetMinSize($self->{console}->ConvertDialogSizeToPixels(Wx::Size->new(384, 48)));
   # end wxGlade

   $self->{config} = Opshon3->new($trn);
   $self->{config}->readconfig();
   $self->{config}->cmdlopt();

   # thr本数
   $self->{grid_1}->SetDefaultCellAlignment(wxALIGN_CENTRE, wxALIGN_CENTRE);
   local $_;
   for(0..15){
      $self->{grid_1}->SetCellAlignment($_, 3, wxALIGN_LEFT, wxALIGN_CENTRE);
      $self->{grid_1}->SetCellValue    ($_, 0, "N/A");
      $self->{grid_1}->SetCellValue    ($_, 1, "N/A");
      $self->{grid_1}->SetCellValue    ($_, 2, "N/A");
      $self->{grid_1}->SetCellValue    ($_, 3, "N/A");
   }
   for($trn->{thrn}..15){
      $self->{grid_1}->SetRowSize($_,0);
   }


}

sub __do_layout {
   my $self = shift;
   # begin wxGlade: MyFrame::__do_layout
   $self->{sizer_1} = Wx::BoxSizer->new(wxVERTICAL);
   $self->{sizer_105} = Wx::BoxSizer->new(wxHORIZONTAL);
   $self->{sizer_1_copy} = Wx::BoxSizer->new(wxVERTICAL);
   $self->{sizer_3_copy} = Wx::FlexGridSizer->new(3, 1, 0, 0);
   $self->{sizer_4_copy} = Wx::BoxSizer->new(wxVERTICAL);
   $self->{sizer_5_copy} = Wx::BoxSizer->new(wxHORIZONTAL);
   $self->{sizer_10} = Wx::BoxSizer->new(wxVERTICAL);
   $self->{sizer_7_copy} = Wx::BoxSizer->new(wxVERTICAL);
   $self->{sizer_8} = Wx::BoxSizer->new(wxHORIZONTAL);
   $self->{sizer_103} = Wx::BoxSizer->new(wxHORIZONTAL);
   $self->{sizer_113} = Wx::BoxSizer->new(wxVERTICAL);
   $self->{sizer_102} = Wx::BoxSizer->new(wxHORIZONTAL);
   $self->{sizer_112} = Wx::BoxSizer->new(wxVERTICAL);
   $self->{sizer_2} = Wx::FlexGridSizer->new(3, 1, 0, 0);
   $self->{sizer_6} = Wx::BoxSizer->new(wxHORIZONTAL);
   $self->{sizer_7} = Wx::StaticBoxSizer->new(Wx::StaticBox->new($self->{notebook_1_pane_1}, wxID_ANY, "\N{U+8d85}!A&&G+\N{U+306e}\N{U+8a2d}\N{U+5b9a}"), wxHORIZONTAL);
   $self->{sizer_server} = Wx::StaticBoxSizer->new(Wx::StaticBox->new($self->{notebook_1_pane_1}, wxID_ANY, "\N{U+25cf}\N{U+30b5}\N{U+30fc}\N{U+30d0}"), wxVERTICAL);
   $self->{sizer_keepvideo} = Wx::StaticBoxSizer->new(Wx::StaticBox->new($self->{notebook_1_pane_1}, wxID_ANY, "\N{U+25cf}\N{U+9332}\N{U+97f3}\N{U+9332}\N{U+753b}\N{U+5224}\N{U+5225}\N{U+65b9}\N{U+6cd5}"), wxVERTICAL);
   $self->{sizer_recmode} = Wx::StaticBoxSizer->new(Wx::StaticBox->new($self->{notebook_1_pane_1}, wxID_ANY, "\N{U+25cf}\N{U+9332}\N{U+97f3}\N{U+6642}\N{U+9593}\N{U+5e2f}\N{U+5224}\N{U+5225}"), wxVERTICAL);
   $self->{sizer_5} = Wx::BoxSizer->new(wxHORIZONTAL);
   $self->{sizer_postmargin} = Wx::StaticBoxSizer->new(Wx::StaticBox->new($self->{notebook_1_pane_1}, wxID_ANY, "\N{U+25cf}\N{U+4fdd}\N{U+5b58}\N{U+5f8c}\N{U+30de}\N{U+30fc}\N{U+30b8}\N{U+30f3}(sec)"), wxVERTICAL);
   $self->{sizer_premargin} = Wx::StaticBoxSizer->new(Wx::StaticBox->new($self->{notebook_1_pane_1}, wxID_ANY, "\N{U+25cf}\N{U+4fdd}\N{U+5b58}\N{U+524d}\N{U+30de}\N{U+30fc}\N{U+30b8}\N{U+30f3}(sec)"), wxVERTICAL);
   $self->{sizer_3} = Wx::BoxSizer->new(wxHORIZONTAL);
   $self->{sizer_4} = Wx::StaticBoxSizer->new(Wx::StaticBox->new($self->{notebook_1_pane_1}, wxID_ANY, "\N{U+25cf}\N{U+51fa}\N{U+529b}\N{U+30c7}\N{U+30a3}\N{U+30ec}\N{U+30af}\N{U+30c8}\N{U+30ea}"), wxHORIZONTAL);
   $self->{sizer_21} = Wx::BoxSizer->new(wxHORIZONTAL);
   $self->{sizer_21}->Add($self->{grid_1}, 0, wxEXPAND, 0);
   $self->{panel_2}->SetSizer($self->{sizer_21});
   $self->{sizer_1}->Add($self->{panel_2}, 0, 0, 0);
   $self->{sizer_4}->Add($self->{outpath}, 0, wxALIGN_CENTER_VERTICAL|wxALL, 4);
   $self->{sizer_4}->Add($self->{dir_picker}, 0, wxALIGN_CENTER|wxALL, 4);
   $self->{sizer_3}->Add($self->{sizer_4}, 1, wxALL, 4);
   $self->{sizer_2}->Add($self->{sizer_3}, 1, 0, 0);
   $self->{sizer_premargin}->Add($self->{premargin}, 0, wxALL, 4);
   $self->{sizer_5}->Add($self->{sizer_premargin}, 0, wxALL, 4);
   $self->{sizer_postmargin}->Add($self->{postmargin}, 0, wxALL, 4);
   $self->{sizer_5}->Add($self->{sizer_postmargin}, 0, wxALL, 4);
   $self->{sizer_2}->Add($self->{sizer_5}, 1, wxEXPAND, 0);
   $self->{sizer_recmode}->Add($self->{recmode}, 0, wxALIGN_CENTER|wxALL, 4);
   $self->{sizer_7}->Add($self->{sizer_recmode}, 0, wxALL|wxEXPAND, 4);
   $self->{sizer_keepvideo}->Add($self->{keepvideo}, 0, wxALIGN_CENTER|wxALL, 4);
   $self->{sizer_7}->Add($self->{sizer_keepvideo}, 0, wxALL|wxEXPAND, 4);
   $self->{sizer_server}->Add($self->{server}, 0, 0, 3);
   $self->{sizer_7}->Add($self->{sizer_server}, 1, 0, 0);
   $self->{sizer_6}->Add($self->{sizer_7}, 1, wxALL|wxEXPAND, 4);
   $self->{sizer_2}->Add($self->{sizer_6}, 1, 0, 0);
   $self->{notebook_1_pane_1}->SetSizer($self->{sizer_2});
   $self->{sizer_102}->Add($self->{text_ctrl_1}, 1, wxALL|wxEXPAND, 4);
   $self->{sizer_112}->Add($self->{button_102r}, 0, wxALIGN_RIGHT|wxALL, 4);
   $self->{sizer_112}->Add($self->{button_102s}, 0, wxALL, 4);
   $self->{sizer_102}->Add($self->{sizer_112}, 0, wxALL, 4);
   $self->{notebook_1_pane_2}->SetSizer($self->{sizer_102});
   $self->{sizer_103}->Add($self->{text_ctrl_2}, 1, wxALL|wxEXPAND, 4);
   $self->{sizer_113}->Add($self->{button_103r}, 0, wxALL, 4);
   $self->{sizer_113}->Add($self->{button_103s}, 0, wxALL, 4);
   $self->{sizer_103}->Add($self->{sizer_113}, 0, wxALL, 4);
   $self->{notebook_1_pane_3}->SetSizer($self->{sizer_103});
   my $Queue = Wx::StaticText->new($self->{notebook_1_pane_4}, wxID_ANY, "Queue", wxDefaultPosition, wxDefaultSize, wxALIGN_CENTER);
   $Queue->SetMinSize($Queue->ConvertDialogSizeToPixels(Wx::Size->new(32, 12)));
   $self->{sizer_8}->Add($Queue, 0, wxALIGN_CENTER, 3);
   $self->{sizer_8}->Add($self->{dlqueue}, 3, wxALL|wxEXPAND, 3);
   $self->{sizer_3_copy}->Add($self->{sizer_8}, 0, 0, 0);
   $self->{sizer_3_copy}->Add(20, 20, 0, 0, 0);
   $self->{sizer_5_copy}->Add(50, 50, 0, 0, 0);
   $self->{sizer_7_copy}->Add($self->{label_2}, 2, 0, 3);
   $self->{sizer_7_copy}->Add($self->{checkbox_00}, 0, wxALL, 4);
   $self->{sizer_7_copy}->Add($self->{checkbox_01}, 0, wxALL, 4);
   $self->{sizer_7_copy}->Add($self->{checkbox_02}, 0, wxALL, 4);
   $self->{sizer_7_copy}->Add($self->{checkbox_03}, 0, wxALL, 4);
   $self->{sizer_7_copy}->Add($self->{checkbox_04}, 0, wxALL, 4);
   $self->{sizer_7_copy}->Add($self->{checkbox_05}, 0, wxALL, 4);
   $self->{sizer_7_copy}->Add($self->{checkbox_06}, 0, wxALL, 4);
   $self->{sizer_7_copy}->Add(8, 8, 0, 0, 0);
   $self->{sizer_7_copy}->Add($self->{checkbox_10}, 0, wxLEFT, 16);
   $self->{sizer_7_copy}->Add($self->{Buton_hibiki}, 0, wxALL, 4);
   $self->{sizer_7_copy}->Add($self->{button_ehibiki}, 0, wxALL, 4);
   $self->{sizer_5_copy}->Add($self->{sizer_7_copy}, 1, 0, 0);
   $self->{sizer_5_copy}->Add(50, 50, 0, 0, 0);
   $self->{sizer_10}->Add($self->{label_3}, 2, 0, 3);
   $self->{sizer_10}->Add($self->{checkbox_00_copy}, 0, wxALL, 4);
   $self->{sizer_10}->Add($self->{checkbox_01_copy}, 0, wxALL, 4);
   $self->{sizer_10}->Add($self->{checkbox_02_copy}, 0, wxALL, 4);
   $self->{sizer_10}->Add($self->{checkbox_03_copy}, 0, wxALL, 4);
   $self->{sizer_10}->Add($self->{checkbox_04_copy}, 0, wxALL, 4);
   $self->{sizer_10}->Add($self->{checkbox_05_copy}, 0, wxALL, 4);
   $self->{sizer_10}->Add($self->{checkbox_06_copy}, 0, wxALL, 4);
   $self->{sizer_10}->Add(8, 8, 0, 0, 0);
   $self->{sizer_10}->Add($self->{checkbox_10_copy}, 0, wxLEFT, 16);
   $self->{sizer_10}->Add($self->{Buton_onsen_copy}, 0, wxALL, 4);
   $self->{sizer_10}->Add($self->{button_eonsen}, 0, wxALL, 4);
   $self->{sizer_5_copy}->Add($self->{sizer_10}, 1, 0, 0);
   $self->{sizer_5_copy}->Add($self->{button_backspace}, 0, wxALL, 4);
   $self->{sizer_4_copy}->Add($self->{sizer_5_copy}, 1, 0, 0);
   $self->{sizer_3_copy}->Add($self->{sizer_4_copy}, 1, 0, 0);
   $self->{notebook_1_pane_4}->SetSizer($self->{sizer_3_copy});
   $self->{sizer_105}->Add($self->{trnsh}, 1, wxALL|wxEXPAND, 4);
   $self->{sizer_1_copy}->Add($self->{button_1}, 0, wxALIGN_RIGHT|wxALL, 4);
   $self->{sizer_1_copy}->Add($self->{button_2}, 0, wxALIGN_RIGHT|wxALL, 4);
   $self->{sizer_1_copy}->Add($self->{button_3}, 0, wxALIGN_RIGHT|wxALL, 4);
   $self->{sizer_1_copy}->Add($self->{button_4}, 0, wxALIGN_RIGHT|wxALL, 4);
   $self->{sizer_105}->Add($self->{sizer_1_copy}, 0, 0, 0);
   $self->{notebook_1_pane_5}->SetSizer($self->{sizer_105});
   $self->{notebook_1}->AddPage($self->{notebook_1_pane_1}, "\N{U+8a2d}\N{U+5b9a}");
   $self->{notebook_1}->AddPage($self->{notebook_1_pane_2}, "\N{U+30ad}\N{U+30fc}\N{U+30ef}\N{U+30fc}\N{U+30c9}");
   $self->{notebook_1}->AddPage($self->{notebook_1_pane_3}, "\N{U+ff2e}\N{U+ff27}\N{U+30ef}\N{U+30fc}\N{U+30c9}");
   $self->{notebook_1}->AddPage($self->{notebook_1_pane_4}, "\N{U+97ff}/\N{U+97f3}\N{U+6cc9}");
   $self->{notebook_1}->AddPage($self->{notebook_1_pane_5}, "\N{U+30c7}\N{U+30d0}\N{U+30c3}\N{U+30b0}\N{U+7528}");
   $self->{sizer_1}->Add($self->{notebook_1}, 2, wxEXPAND, 0);
   $self->{sizer_1}->Add($self->{console}, 0, wxEXPAND, 3);
   $self->SetSizer($self->{sizer_1});
   $self->{sizer_1}->Fit($self);
   $self->Layout();
   # end wxGlade

   ####################################################################
   ###################### ココカラ ####################################
   # 一秒
   $self->{timer_1} = Wx::Timer->new($self, wxID_ANY);
   $self->{timer_1}->Start(500, wxTIMER_CONTINUOUS); 


   my $nownow = time();
   $self->{ntp} = Ntp->new({
      offset2 => $trn->{offset2},
      btest   => $trn->{btest},
      nownow  => $nownow,
      basec   => $trn->{ftime} ? locald ($trn->{ftime}) : $trn->{nownow},
   });

   $trn->{ntps} //= join(",",qw/
             ntp.nict.jp
     ntp.jst.mfeed.ad.jp
   s2csntp.miz.nao.ac.jp
          ntp.ring.gr.jp
         jp.pool.ntp.org
     ats1.e-timing.ne.jp
       ntp.shoshin.co.jp
   /);

   $self->{ntp}->netntp($trn->{ntps});

   ############################################################################
   ### GUI 初期設定 ###########################################################
   ############################################################################
   #$self->purinto("● GUI初期設定.\n");

   ### for my $i(1..16){unlink"banner/thr$i.log"}
   unlink "banner/shutdown";

   if(defined $trn->{outpath} && -d e$trn->{outpath}){
      $self->{outpath}->SetValue($trn->{outpath});
   }else{
      $self->{outpath}->SetValue("未設定");
      $trn->{outpath} = ".";
      Wx::MessageBox("出力ディレクトリを確認してください.\n$trn->{outpath}");
   }

   $self->{premargin}->SetValue($trn->{premargin});

   $self->{postmargin}->SetValue($trn->{postmargin});


   $self->{server}->SetValue($trn->{server});

###$self->{offset2}->SetValue($trn->{offset2});


###$self->{button_fhibiki}->SetValue($trn->{fhibiki});
###$self->{button_fonsen} ->SetValue($trn->{fonsen});
   $self->{button_ehibiki}->SetValue($trn->{ehibiki});
   $self->{button_eonsen} ->SetValue($trn->{eonsen});

   $trn->{srvtime} = $self->{ntp}->timen();

   my $recmode_t ={
      "both"   => 0,
      "1st"    => 1,
      "repeat" => 2,
   };
   $self->{recmode}->SetSelection($recmode_t->{lc($trn->{recmode})});

   my $keepvideo_t ={
      "auto"   => 0,
      "allon"  => 1,
      "alloff" => 2,
   };
   $self->{keepvideo}->SetSelection($keepvideo_t->{lc($trn->{keepvideo})});

   $self->purinto("◯ GUI初期設定完了.\n");

use Win32::Process;
use Win32::Process::List;

   my $P = Win32::Process::List->new();
   my %list = $P->GetProcesses();

   my $chkcount = 0;

   for my $key(keys %list){
      $chkcount++ if $list{$key} =~ /ange4chk/i;
   }


   if($chkcount==0){
      print e"AnGe4chk 起動.\n";
      Win32::Process::Create(my $ProcessObj, "AnGe4chk.exe", "AnGe4chk.exe", 0, CREATE_NO_WINDOW, ".");
###   Win32::Process::Create(my $ProcessObj, "AnGe4chk.exe", "AnGe4chk.exe", 0, CREATE_NEW_CONSOLE, ".");
   }elsif($chkcount==1){
      Wx::MessageBox("AnGe4chk 不完全状態.");
      sleep 4;
   }elsif($chkcount==2){
      Wx::MessageBox("実行中のスレッドを使います.");
   }else{
      Wx::messageBox("AnGe4chk 2個以上起動??.");
      exit;
   }
   reload($self);
}



sub _interval{
   my ($self, $event) = @_;

###$self->{grid_1}->ClearSelection();

   my $eve= 1800*(int(($self->{ntp}->timen()+(($trn->{setuptime}//3)*60))/1800)+1);
   my $chk= $eve -                           (($trn->{setuptime}//3)*60);
   my $chksprintf=(timedb time2hash $chk)->{chksprintf};

   $self->{frame_1_statusbar}->SetStatusText((timedb time2hash $self->{ntp}->timen())->{tosec}."(".$self->{ntp}->timeno().")", 0);
   $self->{frame_1_statusbar}->SetStatusText("次の予約確認時刻は $chksprintf  ".($chk-$self->{ntp}->timen())." 秒後", 1);

   if(-e"banner/areaid.log"){
      open my $fh, "<:utf8", "banner/areaid.log" or die $!;
      $self->{frame_1_statusbar}->SetStatusText(readline $fh, 2);
   }

   opendir my $dh, "banner" or return;
   for(readdir $dh){
      no warnings 'uninitialized';
      if(/^thr(\d+)\.log$/){
         open my $fh, "<:utf8", "banner/$_" or return;
         my $line = readline $fh;
         my($status,$id,$remain,$title) = split(/,/,$line//"");
         $self->{grid_1}->SetCellValue($1-1,0,$status//"");
         $self->{grid_1}->SetCellValue($1-1,1,$id//"");
         if($remain eq "-"){
            $self->{grid_1}->SetCellValue($1-1,2,"");
         }elsif($remain eq "Download"){
            $self->{grid_1}->SetCellValue($1-1,2,"Download");
         }else{
            $self->{grid_1}->SetCellValue($1-1,2,($remain//$self->{ntp}->timen())-$self->{ntp}->timen());
         }
         $self->{grid_1}->SetCellValue($1-1,3,$title//"");
      }
   }
   shque($self, $event);

   $self->{ntp}->netntp($trn->{ntps}) if int rand 1.00027;

   use Win32::Process::List;
   my $P = Win32::Process::List->new();

   if(!$P->GetProcessPid("AnGe4chk.exe")){
###   Win32::Process::Create(my $ProcessObj, "AnGe4chk.exe", "AnGe4chk.exe", 0, CREATE_NEW_CONSOLE, ".");
      Win32::Process::Create(my $ProcessObj, "AnGe4chk.exe", "AnGe4chk.exe", 0, CREATE_NO_WINDOW, ".");
   }

}


sub shque{
   local $_;
   my ($self, $event) = @_;
   my @lett = qw/響(日) 響(月) 響(火) 響(水) 響(木) 響(金) 響(土) 七 八 九
                 音(日) 音(月) 音(火) 音(水) 音(木) 音(金) 音(土)/;
   return "" unless -f "banner/onhibi.log";
   open my $fh, "<", "banner/onhibi.log";
   my $tmp = readline $fh;
   $tmp = "" unless defined $tmp;
   my $kanji = "";
   for(split(/\s+/, $tmp)){
      $kanji .= "$lett[$_] ";
   }
   $self->{dlqueue}->SetValue($kanji);
}


sub _outpath {
   my ($self, $event) = @_;
   # wxGlade: MyFrame::_outpath <event_handler>
   my $tmp_sp = $self->{outpath}->GetValue();
   if(-d e$tmp_sp){
      cfgop($self, "outpath", $tmp_sp);
      $event->Skip;
   }
   # end wxGlade
}


sub _outpath2 {
   my ($self, $event) = @_;
   my $tmp_sp = $self->{dir_picker}->GetPath();
   if(-d e$tmp_sp){
      cfgop($self, "outpath", $tmp_sp);
      $self->{outpath}->SetValue($tmp_sp);
      $event->Skip;
   }
}


sub _shuryo {
   my ($self, $event) = @_;
   # wxGlade: MyFrame::_shuryo <event_handler>
   open my $fh, ">", "banner/shutdown";
   close $fh;
   #unlink "banner/shutdown";
   for my $i(1..16){unlink"banner/thr$i.log"}
   Wx::Exit;
   # end wxGlade
}


sub _nitsuite {
   my ($self, $event) = @_;
   # wxGlade: MyFrame::_nitsuite <event_handler>
   Wx::MessageBox("AnGe4u v0.07β (多分)")
   # end wxGlade
}


################################
# プリント文
sub purinto{
   my $self = shift;
   my $value = shift;
   if(defined $value and $value){
      $self->{console}->AppendText($value);
      print e($value);
   }
}


sub _premargin {
   my ($self, $event) = @_;
   # wxGlade: MyFrame::_premargin <event_handler>
   $trn->{premargin} = $self->{premargin}->GetValue();
   my $chg = cfgop($self, "PreMargin", $trn->{premargin});
   if(!$chg){
      Wx::MessageBox("AnGe4u.ini を編集できません.");
      return "";
   }else{
      ###purinto($self,$chg);
      return $chg;
   }
   # end wxGlade
}


sub _postmargin {
   my ($self, $event) = @_;
   # wxGlade: MyFrame::_postmargin <event_handler>
   $trn->{postmargin} = $self->{postmargin}->GetValue();
   my $chg = cfgop($self, "PostMargin", $trn->{postmargin});
   if(!$chg){
      Wx::MessageBox("AnGe4u.ini を編集できません.");
      return "";
   }else{
      ###purinto($self,$chg);
      return $chg;
   }
   # end wxGlade
}


sub _recmode {
   my ($self, $event) = @_;
   # wxGlade: MyFrame::_recmode <event_handler>
   my $tmp = $self->{recmode}->GetSelection();
      if($tmp ==0){$trn->{recmode} = "Both"  }
   elsif($tmp ==1){$trn->{recmode} = "1st"   }
   elsif($tmp ==2){$trn->{recmode} = "Repeat"}
   else{Wx::MessageBox("どこか間違っている.");exit}
   my $chg = cfgop($self, "RecMode", $trn->{recmode});
   if(!$chg){
      Wx::MessageBox("AnGe4u.ini を編集できません.");
      return "";
   }else{
      ###purinto($self,$chg);
      return $chg;
   }
   # end wxGlade
}


sub _keepvideo {
   my ($self, $event) = @_;
   # wxGlade: MyFrame::_keepvideo <event_handler>
   my $tmp = $self->{keepvideo}->GetSelection();
      if($tmp ==0){$trn->{keepvideo} = "Auto"  }
   elsif($tmp ==1){$trn->{keepvideo} = "AllOn" }
   elsif($tmp ==2){$trn->{keepvideo} = "AllOff"}
   else{Wx::MessageBox("どこか間違っている.");exit}
   my $chg = cfgop($self, "KeepVideo", $trn->{keepvideo});
   if(!$chg){
      Wx::MessageBox("AnGe4u.ini を編集できません.");
      return "";
   }else{
      ###purinto($self,$chg);
      return $chg;
   }

   # end wxGlade
}


sub reload {
   my ($self, $event) = @_;
   # wxGlade: MyFrame::reload <event_handler>
   local $_;
   my $section = "komento";
   $self->{text_ctrl_1}->Clear();
   $self->{text_ctrl_2}->Clear();
   open(my $fh, "<:utf8", "AnGe4u.ini") or Wx::MessageBox("AnGe4u.ini を開けません. : $!");
   for(readline $fh){
      s/[\r\n]*$//;
      s/^\x{20}+//;
       s/\x{20}+$//;
       
      if(/\[([\w\-]+?)\]/i){$section = lc($1)}
      elsif(lc($section) eq "program") {$self->{text_ctrl_1}->AppendText("$_\n")}
      elsif(lc($section) eq "disabled"){$self->{text_ctrl_2}->AppendText("$_\n")}
   }
   close $fh;
   # end wxGlade
}


sub resave{
   my ($self, $event) = @_;
   # wxGlade: MyFrame::resave <event_handler>
   my $tmpkomento = iniread("Komento");
   my $tmpconfig = iniread("Config");
   my $tmp = "";

   {
   local $/ = undef;

   $tmp .= $tmpkomento;
   $tmp =~ s/\s+$//;
   $tmp .= "\n";

   $tmp .= "[Program]\n";
   $tmp .= $self->{text_ctrl_1}->GetValue();
   $tmp =~ s/\s+$//;
   $tmp .= "\n";

   $tmp .= "[Disabled]\n";
   $tmp .= $self->{text_ctrl_2}->GetValue();
   $tmp =~ s/\s+$//;
   $tmp .= "\n";

   $tmp .= "[Config]\n";
   $tmp .= $tmpconfig;
   $tmp =~ s/\s+$//;
   $tmp .= "\n";
   }
   open (my $fh, ">:utf8", "AnGe4u.ini") or Wx::MessageBox("AnGe4u.ini を開けません. : $!");
   print $fh $tmp;
#  print  e$tmp;
   close $fh;
   # end wxGlade
}


sub iniread{
   local $_;
   my ($sectionin) = @_;
   open(my $fh, "<:utf8", "AnGe4u.ini") or Wx::MessageBox("AnGe4u.ini を開けません. : $!");
   my $section = "komento";
   my $config_list = "";
   for(readline $fh){
      s/[\r\n]*$//;
      s/^\x{20}+//;
       s/\x{20}+$//;
      if(/\[(\w+)\]/i){
         $section = $1;
      }elsif(lc($section) eq lc($sectionin)){ 
         $config_list .= "$_\n";
      }
   }
   close $fh;
   $config_list;
}


sub debug_button_1 {
   my ($self, $event) = @_;
   # wxGlade: MyFrame::debug_button_1 <event_handler>
   $self->{trnsh}->Clear();
   my $tmp = "=================================================== [ TRN ]\n";
   for(sort keys %$trn){
      if(defined $trn->{$_}){
         $tmp .= "$_ = $trn->{$_}\n";
      }else{
         $tmp .= "$_ =\n";
      }
   }
   $self->{trnsh}->SetValue($tmp);
   # end wxGlade
}


sub debug_button_2 {
   my ($self, $event) = @_;
   # wxGlade: MyFrame::debug_button_2 <event_handler>
   warn "Event handler (debug_button_2) not implemented";
   $event->Skip;
   # end wxGlade
}


sub debug_button_3 {
   my ($self, $event) = @_;
   # wxGlade: MyFrame::debug_button_3 <event_handler>
   warn "Event handler (debug_button_3) not implemented";
   $event->Skip;
   # end wxGlade
}


sub debug_button_4 {
   my ($self, $event) = @_;
   # wxGlade: MyFrame::debug_button_4 <event_handler>

   my $VAR1;
   {
      open my $fh, "<:utf8", "banner/table.log" or return;
      local $/ = undef;
      my $code = readline $fh;
      close $fh;
      eval $code;
      return if $@;
   }
   use Data::Dumper::AutoEncode;
   local $Data::Dumper::Purity   = 1;
   local $Data::Dumper::Sortkeys = 1; # ハッシュのキーをソートする
   local $Data::Dumper::Indent   = 1; # インデントを縮める

   $self->{trnsh}->SetValue(d eDumper($VAR1));
   # end wxGlade
}


#####################################################################


sub cfgop($$$){
   use File::Copy qw/move/;
   my $self = shift;
   my $key = shift;
   my $arg = shift;
   my $end = "";
   my $dst = "";
   if(!move("AnGe4u.ini","__AnGe4u.ini__")){
      Wx::MessageBox("AnGe4u.ini にアクセスできない.");
      return;
   }
   open my $fi, "<:utf8", "__AnGe4u.ini__" or Wx::MessageBox("設定ファイルを編集できませんよ.") and return;
   flock $fi, 2;
   open my $fo, ">:utf8", "AnGe4u.ini"     or Wx::MessageBox("設定ファイルを編集してませんか？") and return;
   flock $fo, 2;
   my $endtxt;
   for my $line (readline $fi){
      $line =~ s/[\r\n]*$//;
      if($line =~ /([^\s=]+)(\s*=\s*)/i && !$end){
         my $tmp1 = $1;
         my $tmp2 = $2;
         if((lc($key) eq lc($tmp1)) && !$end){
            my $tmp = "$key$2$arg";
            $self->purinto("■設定変更■+-- $tmp\n");
            $trn->{lc($key)} = $arg;
            $dst .= "$tmp\n";
            $end = 1;
         }else{
            $dst .= "$line\n";
         }
      }else{
         $dst .= "$line\n";
      }
   }
   $dst .= "$key = $arg\n" if !$end;
   print $fo $dst;
   close $fi;
   close $fo;
   unlink ("__AnGe4u.ini__");
   return 1;
}



sub _checkbox_hibiki_3st {
   my ($self, $event) = @_;
   # wxGlade: MyFrame::_checkbox_hibiki_3st <event_handler>
   if($self->{checkbox_00}->GetValue() &&
      $self->{checkbox_01}->GetValue() &&
      $self->{checkbox_02}->GetValue() &&
      $self->{checkbox_03}->GetValue() &&
      $self->{checkbox_04}->GetValue() &&
      $self->{checkbox_05}->GetValue()){
     #$self->{checkbox_06}->GetValue()

      $self->{checkbox_10}->SetValue(1);
   }elsif(!(
      $self->{checkbox_00}->GetValue() ||
      $self->{checkbox_01}->GetValue() ||
      $self->{checkbox_02}->GetValue() ||
      $self->{checkbox_03}->GetValue() ||
      $self->{checkbox_04}->GetValue() ||
      $self->{checkbox_05}->GetValue())){
    # $self->{checkbox_06}->GetValue()

      $self->{checkbox_10}->SetValue(0);
   }else{
      $self->{checkbox_10}->Set3StateValue(wxCHK_UNDETERMINED);
   }
   # end wxGlade
}


sub _checkbox_hibiki {
   my ($self, $event) = @_;
   # wxGlade: MyFrame::_checkbox_hibiki <event_handler>
   if($self->{checkbox_10}->GetValue()){

      $self->{checkbox_00}->SetValue(1);
      $self->{checkbox_01}->SetValue(1);
      $self->{checkbox_02}->SetValue(1);
      $self->{checkbox_03}->SetValue(1);
      $self->{checkbox_04}->SetValue(1);
      $self->{checkbox_05}->SetValue(1);
      #$self->{checkbox_06}->SetValue(1);
   }else{
   
      $self->{checkbox_00}->SetValue(0);
      $self->{checkbox_01}->SetValue(0);
      $self->{checkbox_02}->SetValue(0);
      $self->{checkbox_03}->SetValue(0);
      $self->{checkbox_04}->SetValue(0);
      $self->{checkbox_05}->SetValue(0);
      #$self->{checkbox_06}->SetValue(0);
   }
   # end wxGlade
}


sub _button_hibiki {
   my ($self, $event) = @_;
   # wxGlade: MyFrame::_button_hibiki <event_handler>
   my $tmp;
   my $hibiq = [];
      $tmp = $self->{checkbox_00}->GetValue()*1;
      push @{$hibiq}, $tmp if $tmp;
      $tmp = $self->{checkbox_01}->GetValue()*2;
      push @{$hibiq}, $tmp if $tmp;
      $tmp = $self->{checkbox_02}->GetValue()*3;
      push @{$hibiq}, $tmp if $tmp;
      $tmp = $self->{checkbox_03}->GetValue()*4;
      push @{$hibiq}, $tmp if $tmp;
      $tmp = $self->{checkbox_04}->GetValue()*5;
      push @{$hibiq}, $tmp if $tmp;
      $tmp = $self->{checkbox_05}->GetValue()*6;
      push @{$hibiq}, $tmp if $tmp;
      #$tmp = $self->{checkbox_06}->GetValue()*0;
      #push @{$hibiq}, $tmp if $tmp;
      if(! -f "banner/onhibi.log"){
         open my $fh, ">", "banner/onhibi.log";
         close $fh
      }
      open my $fh, "+<", "banner/onhibi.log" or die $!;
      flock $fh, 2;
      my $queueline = readline $fh;
      $queueline = shukutai $queueline;
      my @tmp;
      if($queueline){
         @tmp = split(/\s+/,$queueline);
         push @tmp, @$hibiq;
      }else{
         @tmp = @$hibiq;
      }
      seek($fh, 0, 0);
      print $fh join(" ",@tmp);
      close $fh;
      shque($self, $event);
   # end wxGlade
}


#sub _togglebutton_fhibiki {
#   my ($self, $event) = @_;
#   # wxGlade: MyFrame::_togglebutton_fhibiki <event_handler>
#   my $tmp = $trn->{fhibiki} = ($self->{button_fhibiki}->GetValue() ? 1 : 0);
#   cfgop($self, "fHibiki", $tmp);
#   # end wxGlade
#}


sub _button_everyhibiki {
   my ($self, $event) = @_;
   # wxGlade: MyFrame::_button_everyhibiki <event_handler>
   my $tmp = $trn->{ehibiki} = ($self->{button_ehibiki}->GetValue() ? 1 : 0);
   cfgop($self, "ehibiki", $tmp);
   # end wxGlade
}


sub _checkbox_onsen_3st {
   my ($self, $event) = @_;
   # wxGlade: MyFrame::_checkbox_onsen_3st <event_handler>
   if($self->{checkbox_00_copy}->GetValue() &&
      $self->{checkbox_01_copy}->GetValue() &&
      $self->{checkbox_02_copy}->GetValue() &&
      $self->{checkbox_03_copy}->GetValue() &&
      $self->{checkbox_04_copy}->GetValue() &&
      $self->{checkbox_05_copy}->GetValue() &&
      $self->{checkbox_06_copy}->GetValue()){

      $self->{checkbox_10_copy}->SetValue(1);

   }elsif(!(
      $self->{checkbox_00_copy}->GetValue() ||
      $self->{checkbox_01_copy}->GetValue() ||
      $self->{checkbox_02_copy}->GetValue() ||
      $self->{checkbox_03_copy}->GetValue() ||
      $self->{checkbox_04_copy}->GetValue() ||
      $self->{checkbox_05_copy}->GetValue() ||
      $self->{checkbox_06_copy}->GetValue())){

      $self->{checkbox_10_copy}->SetValue(0);

   }else{
      $self->{checkbox_10_copy}->Set3StateValue(wxCHK_UNDETERMINED);
   }
   # end wxGlade
}


sub _checkbox_onsen {
   my ($self, $event) = @_;
   # wxGlade: MyFrame::_checkbox_onsen <event_handler>
   if($self->{checkbox_10_copy}->GetValue()){

      $self->{checkbox_00_copy}->SetValue(1);
      $self->{checkbox_01_copy}->SetValue(1);
      $self->{checkbox_02_copy}->SetValue(1);
      $self->{checkbox_03_copy}->SetValue(1);
      $self->{checkbox_04_copy}->SetValue(1);
      $self->{checkbox_05_copy}->SetValue(1);
      $self->{checkbox_06_copy}->SetValue(1);
   }else{
      $self->{checkbox_00_copy}->SetValue(0);
      $self->{checkbox_01_copy}->SetValue(0);
      $self->{checkbox_02_copy}->SetValue(0);
      $self->{checkbox_03_copy}->SetValue(0);
      $self->{checkbox_04_copy}->SetValue(0);
      $self->{checkbox_05_copy}->SetValue(0);
      $self->{checkbox_06_copy}->SetValue(0);
   }
   # end wxGlade
}


sub _button_onsen {
   my ($self, $event) = @_;
   # wxGlade: MyFrame::_button_onsen <event_handler>
   my $tmp;
   my $onq = [];
      $tmp = $self->{checkbox_00_copy}->GetValue()*11;
      push @{$onq}, $tmp if $tmp;
      $tmp = $self->{checkbox_01_copy}->GetValue()*12;
      push @{$onq}, $tmp if $tmp;
      $tmp = $self->{checkbox_02_copy}->GetValue()*13;
      push @{$onq}, $tmp if $tmp;
      $tmp = $self->{checkbox_03_copy}->GetValue()*14;
      push @{$onq}, $tmp if $tmp;
      $tmp = $self->{checkbox_04_copy}->GetValue()*15;
      push @{$onq}, $tmp if $tmp;
      $tmp = $self->{checkbox_05_copy}->GetValue()*16;
      push @{$onq}, $tmp if $tmp;
      $tmp = $self->{checkbox_06_copy}->GetValue()*10;
      push @{$onq}, $tmp if $tmp;
      ###AnGe4w::go_download($onq);
      if(! -f "banner/onhibi.log"){
         open my $fh, ">", "banner/onhibi.log";
         close $fh
      }
      open my $fh, "+<", "banner/onhibi.log" or die $!;
      flock $fh, 2;
      my $queueline = readline $fh;
      $queueline = shukutai $queueline;
      my @tmp;
      if($queueline){
         @tmp = split(/\s+/,$queueline);
         push @tmp, @$onq;
      }else{
         @tmp = @$onq;
      }
      seek($fh, 0, 0);
      print $fh join(" ",@tmp);
      close $fh;
      shque($self, $event);
   # end wxGlade
}


#sub _togglebutton_fonsen {
#   my ($self, $event) = @_;
#   # wxGlade: MyFrame::_togglebutton_fonsen <event_handler>
#   my $tmp = $trn->{fonsen} = ($self->{button_fonsen}->GetValue() ? 1 : 0);
#   cfgop($self, "fOnsen", $tmp);
#   # end wxGlade
#}


sub _button_everyonsen {
   my ($self, $event) = @_;
   # wxGlade: MyFrame::_button_everyonsen <event_handler>
   my $tmp = $trn->{eonsen} = ($self->{button_eonsen}->GetValue() ? 1 : 0);
   cfgop($self, "eOnsen", $tmp);
   # end wxGlade
}


sub _button_backspace {
   my ($self, $event) = @_;
   # wxGlade: MyFrame::_button_backspace <event_handler>
      if(! -f "banner/onhibi.log"){
         return "";
      }
      open my $fh, "+<", "banner/onhibi.log";
      flock $fh, 2;
      my $queueline = readline $fh;
      if(!$queueline){
         close $fh;
         return "";
      }
      my @tmp = split(/\s+/,$queueline);
      pop @tmp;
      truncate($fh, 0);
      seek($fh, 0, 0);
      print $fh join(" ",@tmp);
      close $fh;
      shque($self, $event);
   # end wxGlade
}


$SIG{HUP} = sub {
   #open my $fh, ">", "banner/shutdown";
   #close $fh;
   #unlink "banner/shutdown";
   #for my $i(1..16){unlink"banner/thr$i.log"}
   Wx::Exit;
};

$SIG{INT} = sub {
   Wx::Exit;
};




sub _quit {
   my ($self, $event) = @_;
   # wxGlade: MyFrame::_quit <event_handler>
   Wx::Exit;
   # end wxGlade
}


sub _server {
   my ($self, $event) = @_;
   # wxGlade: MyFrame::_server <event_handler>
   my $tmp_sp = $self->{server}->GetValue();
   cfgop($self, "server", $tmp_sp);
   # end wxGlade
}

# end of class MyFrame

1;

package MyApp;

use base qw(Wx::App);
use strict;

sub OnInit {
   my( $self ) = shift;

   Wx::InitAllImageHandlers();

   my $frame_1 = MyFrame->new();

   $self->SetTopWindow($frame_1);
   $frame_1->Show(1);

   return 1;
}
# end of class MyApp

package main;
#unless(caller){

use FindBin;
   chdir $FindBin::Bin;

   my $AnGe4u = MyApp->new();
   $AnGe4u->MainLoop();
#}
